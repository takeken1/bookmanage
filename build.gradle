buildscript {
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath("org.flywaydb:flyway-database-postgresql:10.15.0")
	}
}

plugins {
	id 'org.springframework.boot' version '3.3.1'
	id 'io.spring.dependency-management' version '1.1.5'
	id 'org.jetbrains.kotlin.plugin.jpa' version '1.9.24'
	id 'org.jetbrains.kotlin.jvm' version '1.9.24'
	id 'org.jetbrains.kotlin.plugin.spring' version '1.9.24'
	id "org.flywaydb.flyway" version "10.15.0"
	id 'nu.studer.jooq' version '9.0'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-jooq'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'com.fasterxml.jackson.module:jackson-module-kotlin'
	implementation 'org.flywaydb:flyway-core'
	implementation 'org.flywaydb:flyway-database-postgresql'
	implementation 'org.jetbrains.kotlin:kotlin-reflect'
	compileOnly 'org.projectlombok:lombok'
	developmentOnly 'org.springframework.boot:spring-boot-docker-compose'
	runtimeOnly 'org.postgresql:postgresql'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.jetbrains.kotlin:kotlin-test-junit5'
	testImplementation 'io.kotest:kotest-runner-junit5-jvm:5.9.1'
	testImplementation 'io.mockk:mockk:1.13.11'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
	jooqGenerator 'org.postgresql:postgresql:42.5.4'
}

kotlin {
	compilerOptions {
		freeCompilerArgs.addAll '-Xjsr305=strict'
	}
}

test {
	useJUnitPlatform()
}

tasks.named('test') {
	useJUnitPlatform()
}

import org.jooq.meta.jaxb.Logging

jooq {
	version = '3.19.10'  // default (can be omitted)
	edition = nu.studer.gradle.jooq.JooqEdition.OSS  // default (can be omitted)

	configurations {
		main {  // name of the jOOQ configuration
			generateSchemaSourceOnCompilation = true  // default (can be omitted)

			generationTool {
				logging = Logging.WARN
				jdbc {
					driver = 'org.postgresql.Driver'
					url = 'jdbc:postgresql://localhost:5432/book_database'
					user = 'myuser'
					password = 'secret'
				}
				generator {
					name = 'org.jooq.codegen.DefaultGenerator'
					database {
						name = 'org.jooq.meta.postgres.PostgresDatabase'
						inputSchema = 'public'
					}
					generate {
						deprecated = false
						records = false
						immutablePojos = false
						fluentSetters = false
					}
					target {
						packageName = 'com.example.bookmanage'
						directory = 'build/generated-src/jooq/main'  // default (can be omitted)
					}
					strategy.name = 'org.jooq.codegen.DefaultGeneratorStrategy'
				}
			}
		}
	}
}

flyway {
	driver = 'org.postgresql.Driver'
	url = 'jdbc:postgresql://localhost:5432/book_database'
	user = 'myuser'
	password = 'secret'
	schemas = ['public']
	locations = ['classpath:db/migration']
}
